import pytest
from fastapi.testclient import TestClient
from main import app
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool
import models
from database import Base, get_db
from auth import get_password_hash

# 创建内存数据库用于测试
SQLALCHEMY_DATABASE_URL = "sqlite:///:memory:"

engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    connect_args={"check_same_thread": False},
    poolclass=StaticPool,
)
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# 创建测试数据库表
Base.metadata.create_all(bind=engine)

def override_get_db():
    try:
        db = TestingSessionLocal()
        yield db
    finally:
        db.close()

app.dependency_overrides[get_db] = override_get_db

client = TestClient(app)

def ensure_admin():
    """确保admin用户存在"""
    db = TestingSessionLocal()
    
    # 清理可能存在的admin用户
    db.query(models.User).filter(models.User.username == "admin").delete()
    db.commit()
    
    # 创建admin用户
    admin_user = models.User(
        username="admin",
        email="admin@admin.com",
        hashed_password=get_password_hash("admin123"),
        is_active=True,
        is_approved=True,
        is_superuser=True,
        is_deleted=False
    )
    db.add(admin_user)
    db.commit()
    db.refresh(admin_user)
    db.close()
    return admin_user

def get_token():
    """获取admin用户的token"""
    # 确保admin用户存在
    ensure_admin()
    
    # 使用相同的数据库会话进行登录
    def override_get_db_for_login():
        try:
            db = TestingSessionLocal()
            yield db
        finally:
            db.close()
    
    # 临时覆盖依赖
    app.dependency_overrides[get_db] = override_get_db_for_login
    
    try:
        resp = client.post("/auth/login", data={"username": "admin", "password": "admin123"})
        assert resp.status_code == 200
        return resp.json()["access_token"]
    finally:
        # 恢复原始依赖
        app.dependency_overrides[get_db] = override_get_db

def auth_headers():
    """获取带认证头的请求头"""
    token = get_token()
    return {"Authorization": f"Bearer {token}"}

def test_get_provinces():
    """测试获取省份列表"""
    resp = client.get("/provinces", headers=auth_headers())
    assert resp.status_code == 200
    assert isinstance(resp.json(), list)

def test_get_cities_by_province():
    """测试根据省份获取城市列表"""
    resp = client.get("/provinces/1/cities", headers=auth_headers())
    assert resp.status_code in (200, 404)

def test_exam_points_import():
    """测试考点数据导入"""
    resp = client.post("/exam-points/import", json={"data": []}, headers=auth_headers())
    assert resp.status_code in (200, 422)

def test_exam_papers_upload():
    """测试试卷文件上传"""
    with open(__file__, "rb") as f:
        files = {"file": ("test.txt", f, "text/plain")}
        resp = client.post("/exam-papers/upload", files=files, headers=auth_headers())
        assert resp.status_code in (200, 400, 422)

def test_ollama_status():
    """测试Ollama状态检查"""
    resp = client.get("/ollama/status", headers=auth_headers())
    assert resp.status_code == 200
    assert "status" in resp.json()

def test_user_approve_and_toggle():
    """测试用户审核和状态切换"""
    # 先创建一个测试用户
    test_user_data = {
        "username": "testuser_approve",
        "email": "test_approve@example.com",
        "password": "testpass123"
    }
    register_resp = client.post("/auth/register", json=test_user_data)
    assert register_resp.status_code == 200
    user_id = register_resp.json()["id"]
    
    # 测试审核用户
    resp = client.put(f"/users/{user_id}/approve", json={"is_approved": True}, headers=auth_headers())
    assert resp.status_code in (200, 404)
    
    # 测试切换用户状态
    resp2 = client.put(f"/users/{user_id}/toggle-status", headers=auth_headers())
    assert resp2.status_code in (200, 404)

def test_user_delete():
    """测试删除用户"""
    # 先创建一个测试用户
    test_user_data = {
        "username": "testuser_delete",
        "email": "test_delete@example.com",
        "password": "testpass123"
    }
    register_resp = client.post("/auth/register", json=test_user_data)
    assert register_resp.status_code == 200
    user_id = register_resp.json()["id"]
    
    # 测试删除用户
    resp = client.delete(f"/users/{user_id}", headers=auth_headers())
    assert resp.status_code in (200, 404)

def test_exam_paper_extract_with_ollama():
    """测试Ollama提取题目"""
    resp = client.post("/exam-papers/1/extract-with-ollama", headers=auth_headers())
    assert resp.status_code in (200, 404, 422)

def test_exam_questions_crud():
    """测试试题CRUD操作"""
    # 获取试题列表
    resp = client.get("/exam-questions", headers=auth_headers())
    assert resp.status_code == 200
    
    # 获取单个试题
    resp2 = client.get("/exam-questions/1", headers=auth_headers())
    assert resp2.status_code in (200, 404)
    
    # 创建试题
    resp3 = client.post("/exam-questions", json={}, headers=auth_headers())
    assert resp3.status_code in (422, 400)
    
    # 更新试题
    resp4 = client.put("/exam-questions/1", json={}, headers=auth_headers())
    assert resp4.status_code in (422, 404, 400)
    
    # 删除试题
    resp5 = client.delete("/exam-questions/1", headers=auth_headers())
    assert resp5.status_code in (200, 404) 